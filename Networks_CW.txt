Networks and Communication Coursework

1. 

  a)

	The main reason why DNS uses UDP is efficiency. Unlike UDP, TCP needs a several of packets to send over in order to establish a connection. Also DNS does not need to send large packets therefore it can allow itself to care more about speed where it send some packets and all it wants is just a quick response. Therefore UDP is a good choice, however in some cases DNS can actually choose between UDP and TCP when the packet is too large. Also to avoid using TCP, UDP can segment packets and simply sent several of them rather than creating TCP connection. Also since DNS does not care about packets order it does not really need all compexity that TCP has to handle that. In HTTP case, it does care about reliable packets delivery and the order of them that. Another feature of TCP is better security when compared with UDP. It also needs to deal with large payloads therefore TCP (and definitely not UDP) is the tool that can satisfy HTTP.

  b)	

  	So at the very beginning it needs to get information about website therefore first UDP connection is used to communicate with local DNS, therefore one packet is send to request data another packet of data is received. After it got all necessary information about web site then it needs to establish TCP connection where client sends SYN, server responses with SYN-ACK and again client send ACK, which is called three way handshake. So three packets are send over network. 

  	Then client sends request for HTTP and gets ACK so we have 2 packets so far plus html file request (assume html file has size less than MSS) with 3 pics therefore we get 4 packets with 4 ACKs so for data we have 10 packets in total. 

  	Finally, termination of TCP requires another 4 packets to be send over the network: client sends FIN, server responds with ACK and straight FIN message and lastly client sends ACK where TCP connection ends completely.


  c)

  	TCP slow start will not have an affect, because none of the packets are big enough to exceed MSS in other words no need to avoid network congestion.




2. 

	a)

		In total 6 round trips excluding connection establishment and termination: HELO, MAIL FROM, RCPT TO, DATA, email message where last char is dot, and QUIT.

	b) 

		The difference between sending one seperate message per user and sending only one message with multiple receivers is efficiency. Seperate messages require to establish and terminate TCP connection for each email and the message (Data) will also be sent many times even though it does not change. This is very inefficient, but sending to multiple receivers data is sent only once and sender's server needs to establish only one TCP connection and send all receivers with corresponding data to particular server. However if receivers email domain is different then it has no choice and it needs to establish TCP connection and send data over as many times as there different domains.

	c)

		At the beginning SMTP sends short packages such as receiver, sender addresses which increases increases window size using assumtion of fast network. When it comes to data part, the congestion window might be already quite big and it would try to send mail body at once and network might just not handle it.


3.

	a)

		In GoBackN A sends 9 segments. Segments are send in given order: 1, 2, 3, 4, 5 and it needs to resend segments 2, 3, 4 and 5. B sends 8 ACK's in total where first 4 ACK's has sequence number 1 and the rest of the ACK's will have 2, 3, 4, 5 sequence numbers.

		In Selective Repeat A needs to send 6 segments. First time they are send in this order: 1, 2, 3, 4 and 5 and after it resends segment 2. B sends 5 ACK's in total. First 4 of them has a sequence number 1, 3, 4, 5 and after it, one ACK has sequence number of 2.

		In TCP A needs to send 6 segments. Firstly they are send in order of 1, 2, 3, 4 and 5 and after 2 is being re-sent. B needs to send 5 ACKs in total where 4 of them has sequence number 2 and the other one is 6. This is becouse TCP sends an ACK with an next expected sequence number.

	b)

		It must be TCP, because of fast retransmit which makes TCP not to wait for a timeout of some packets, but makes it retransmit it straight after it gets unexpected (greater) sequence number. 





4.

	a)  Assumtion: system use TCP Tahoe.

		Time	Phase (SS or CA)	CWND (#segments)	CWND threshold		Packets to transmit
		---------------------------------------------------------------------------------------
		0		SS					1					infinity			1			
		1		SS					2					infinity			2, 3
		2		SS					4					infinity			4, 5, 6, 7
		3		SS					1					2					4
		4		SS					2					2					8, 9
		5		CA					3					2					10, 11, 12


	b)
		total number of packets transmitted / total time = 12 packets sent / 6 seconds = 2 packets/s


5.

	a)
		Utilisation is inversally proportional to RTT therefore we get:
		Utilization ratio X : Y = 1/(RTTx * Bandwidthx) : 1/(RTTy * Bandwidthy) = (10 * 100) : (1000 * 1 * 1024) = 1024 : 1 = 1024

	b)

		For throughput we have (1.22 * MSS) / (RTT * P^0.5) therefore X : Y = (1.22 * MSS)/(RTT * Px^0.5) : (1.22 * MSS)/(RTT * Py^0.5) = 1 / 1^0.5 : 1 / 4^0.5 = 1 : 1/2 = 2

	c)

		For large RTT we can use TCP splitting which maintains connection with a very large congestion window.
		For lossy links, we can split tcp connections to distinguish wired/wireless IP or let the base station do at least some retransmission, but without informing the source.

Our answer is: 1234.

The next answers are:
1c34f541c8058e9c9c75d5cd38258cc68639ed6d75bc470262d642ad0e80d8a1
999f536ded92cb264c297ca90de5b894cf1eac5a3997d0b3aa10570d902118bf
b0b32c949b44052d12291ce595edb0d2ab44003b333f21f631288e02bab234f5
d4fbcf67c5dc06dfadca421454b68bec504762e367abf6a5ca30585f65a4a42e

Homework is now complete.
